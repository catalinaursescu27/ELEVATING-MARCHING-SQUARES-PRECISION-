//Copyright 314CA URSESCU ELENA-CATALINA

PROGRAMMING OF COMPUTERS - ASSIGNMENT 2

...............................................................................

*The implementation uses two data structures:
    - For matrices (with 4 fields)
    - For the array of matrices (with 3 fields)
    
...............................................................................

1) Case 'L':
    - Implemented through a function for dynamically allocating memory for a matrix, handling edge cases.
    - The matrix is indexed in the dynamically allocated array initialized in the main function and reallocated during each addition.
    - The matrix reading function also calculates the sum of its elements.
    
...............................................................................

2) Case 'D':
    - The dimensions of the matrix, stored using the data structure, are generated by a void function.
    - In the main function, these dimensions are assigned to pointer variables for rows and columns.
    
...............................................................................

3) Case 'P':
    - A function is created to display the matrix using the fields of the data structure (for the matrix and its dimensions).

...............................................................................

4) Case 'C':
    - The function creates a resized matrix that replaces the original one in the array.
    - The new sum of elements is calculated.
    - In the main function, the resized matrix is indexed using an auxiliary variable, which is then deallocated.

...............................................................................

5) Case 'M':
    - The function uses an auxiliary matrix to store the product of two matrices and calculates the sum of its elements (also verifying cases where multiplication is not possible).
    - In the main function, this matrix is indexed at the end of the array.

...............................................................................

6) Case 'O':
    - The array of matrices is sorted based on the sum of their elements using bubble sort, leveraging the fields of the data structure.

...............................................................................

7) Case 'T':
    - The transpose of a matrix is created, which replaces the original one in the array (the sum of elements remains the same).
    - In the main function, the transposed matrix is indexed using an auxiliary variable, which is then deallocated.

...............................................................................

8) Case 'F':
    - The function deallocates memory for a single specified matrix for efficiency purposes.

...............................................................................

9) Case 'Q':
    - The function deallocates memory for each matrix and then for the entire array to avoid memory leaks.

...............................................................................

10) Case 'S' (BONUS):
    - Five additional functions are added to handle the bonus requirements:
        - A function that adds two matrices into an auxiliary pointer variable.
        - A similar function that subtracts two matrices.
        - A function that handles a specific case of matrix resizing, enabling further algorithms.
        - A function for creating submatrices, dividing the matrix into multiple blocks.
        - A function implementing Strassen's algorithm, which involves adding and subtracting blocks, using previously implemented functions, and ensuring all resources are deallocated at the end.
    
...............................................................................

*In the main function, the indices of matrices are read where necessary to call the corresponding functions. 
A suitable message is printed if the specified index does not exist.
